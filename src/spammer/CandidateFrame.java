/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package spammer;

import java.util.ArrayList;
import java.io.File;
import java.io.FileOutputStream;

/**
 *
 * @author admin
 */
public class CandidateFrame extends javax.swing.JFrame {

    /**
     * Creates new form CandidateFrame
     */
    Details dt=new Details();
    
    public CandidateFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Baskerville Old Face", 0, 36)); // NOI18N
        jLabel1.setText("Spammer Group Candidates");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setFont(new java.awt.Font("Bell MT", 0, 18)); // NOI18N
        jButton1.setText("Feature Extraction");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(jButton1)))
                .addContainerGap(115, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jButton1)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try
        {
            FeatureExtraction fe=new FeatureExtraction();
            double maxG=0;
            for(int i=0;i<dt.cand.size();i++)
            {
                String rid=dt.cand.get(i).toString();
                double g=0;
                if(rid.contains("#"))
                {
                    String t[]=rid.split("#");
                    g=t.length;
                }
                else
                    g=1;
                maxG=Math.max(maxG, g);
            }
            
            double maxPg=0;
            for(int i=0;i<dt.cand.size();i++)
            {
                String rid=dt.cand.get(i).toString();
                ArrayList pro=getProduct(rid);
                maxPg=Math.max(maxPg, pro.size());
            }
            
            
            System.out.println("maxG = "+maxG+" : "+maxPg);
            int sp=0;
            int nsp=0;
            
            String res1="";
            String res2="F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,F11,Cls\n";;
            
            for(int i=0;i<dt.cand.size();i++)
            {
                String rid=dt.cand.get(i).toString();
                ArrayList pro=getProduct(rid);  // get product
                ArrayList inPro=getIntersectProduct(rid);
                double rv=(double)getReviewCount(rid); // get review count
                
                double rate[]=getRating(rid);
                
                
                double v1=fe.GTW(rid,pro);
                double v2=fe.GD(rid,pro);
                double v3=fe.GETF(rid,pro);
                double v4=fe.GSR(rid,pro);
                double v5=fe.GS(rid,maxG);
                double v6=fe.GSUP(pro, maxPg);
                double v7=(double)inPro.size()/(double)pro.size();
                double v8=fe.RV(pro,rid);
                double v9=fe.PRR(pro, rid);
                double v10=fe.Tightness(rid, pro, rv); // Spammer group tightness:
                double avg=(v1+v2+v3+v4+v5+v6+v7+v8+v9+v10)/10;
                //System.out.println(rid+" = "+v1+" : "+v2+" : "+v3+" : "+v4+" : "+v5+" : "+v6+" : "+v7+" : "+v8+" : "+v9+" : "+v10+" === "+avg);
                System.out.println(rid+" : "+avg);
                if(avg>0.6)
                {
                    dt.spm.add(rid);
                    sp++;
                    res2=res2+v1+","+v2+","+v3+","+v4+","+v5+","+v6+","+v7+","+v8+","+v9+","+v10+","+avg+",Spammer\n";
                }
                else
                {
                    nsp++;
                    res2=res2+v1+","+v2+","+v3+","+v4+","+v5+","+v6+","+v7+","+v8+","+v9+","+v10+","+avg+",NonSpammer\n";
                }
                
                res1=res1+v1+"\t"+v2+"\t"+v3+"\t"+v4+"\t"+v5+"\t"+v6+"\t"+v7+"\t"+v8+"\t"+v9+"\t"+v10+"\n";
                
            }
            System.out.println("sp == "+sp);
            System.out.println("nsp == "+nsp);
            
            File fe1=new File("in1.csv");
            FileOutputStream fos=new FileOutputStream(fe1);
            fos.write(res2.getBytes());
            fos.close();
            
            FeatureFrame ff=new FeatureFrame();
            ff.setVisible(true);
            ff.setTitle("Features");
            ff.setResizable(false);
            ff.jTextArea1.setText(res1);
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public ArrayList getProduct(String rid)
    {
        
        ArrayList pro=new ArrayList();
        try
        {
            if(rid.contains("#"))
            {
                String rs[]=rid.split("#");
                for(int i=0;i<rs.length;i++)
                {
                    for(int j=0;j<dt.reviews.size();j++)
                    {
                        String sg=dt.reviews.get(j).toString();
                        if(sg.contains(rs[i]))
                        {
                            String s1[]=sg.split("#");
                            if(!pro.contains(s1[0]))
                                pro.add(s1[0]);
                        }
                    }
                }
            }
            else
            {
                // only one rid
                for(int i=0;i<dt.reviews.size();i++)
                {
                    String sg=dt.reviews.get(i).toString();
                    if(sg.contains(rid))
                    {    
                        String s1[]=sg.split("#");
                        if(!pro.contains(s1[0]))
                            pro.add(s1[0]);
                    }
                }
            }
            
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return pro;
    }
    
    
    public ArrayList getIntersectProduct(String rid)
    {
        
        ArrayList pro=new ArrayList();
        try
        {
            if(rid.contains("#"))
            {
                String rs[]=rid.split("#");
                for(int i=0;i<rs.length;i++)
                {
                    ArrayList at=new ArrayList();
                    for(int j=0;j<dt.reviews.size();j++)
                    {
                        String sg=dt.reviews.get(j).toString();
                        if(sg.contains(rs[i]))
                        {
                            String s1[]=sg.split("#");
                            if(!at.contains(s1[0]))
                                at.add(s1[0]);
                        }
                    }
                    if(pro.isEmpty())
                        pro=at;
                    else
                        pro.retainAll(at);
                }
            }
            else
            {
                // only one rid
                for(int i=0;i<dt.reviews.size();i++)
                {
                    String sg=dt.reviews.get(i).toString();
                    if(sg.contains(rid))
                    {    
                        String s1[]=sg.split("#");
                        if(!pro.contains(s1[0]))
                            pro.add(s1[0]);
                    }
                }
            }
            
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return pro;
    }
    
    
    public int getReviewCount(String rid)
    {
        int rc=0;
        try
        {
            if(rid.contains("#"))
            {
                String rs[]=rid.split("#");
                for(int i=0;i<rs.length;i++)
                {
                    for(int j=0;j<dt.reviews.size();j++)
                    {
                        String sg=dt.reviews.get(j).toString();
                        if(sg.contains(rs[i]))
                            rc++;
                    }
                }
            }
            else
            {
                // only one rid
                for(int i=0;i<dt.reviews.size();i++)
                {
                    String sg=dt.reviews.get(i).toString();
                    if(sg.contains(rid))
                        rc++;
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return rc;
    }
    
    public double[] getRating(String rid)
    {
        
        ArrayList<Double> rate=new ArrayList();
        try
        {
            if(rid.contains("#"))
            {
                String rs[]=rid.split("#");
                for(int i=0;i<rs.length;i++)
                {
                    for(int j=0;j<dt.reviews.size();j++)
                    {
                        String sg=dt.reviews.get(j).toString();
                        if(sg.contains(rs[i]))
                        {
                            String s1[]=sg.split("#");
                            rate.add(Double.parseDouble(s1[2]));
                        }
                    }
                }
            }
            else
            {
                // only one rid
                for(int i=0;i<dt.reviews.size();i++)
                {
                    String sg=dt.reviews.get(i).toString();
                    if(sg.contains(rid))
                    {    
                        String s1[]=sg.split("#");
                        rate.add(Double.parseDouble(s1[2]));
                    }
                }
            }
            
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        double de[]=new double[rate.size()];
        for(int i=0;i<rate.size();i++)
            de[i]=rate.get(i);
        return de;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CandidateFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CandidateFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CandidateFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CandidateFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CandidateFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
